// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: profies.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (id, user_id, username, slug, avatar_image, cover_image, head_line, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, slug, username, updated_at, avatar_image, cover_image, head_line
`

type CreateProfileParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Username    string
	Slug        string
	AvatarImage sql.NullString
	CoverImage  sql.NullString
	HeadLine    sql.NullString
	UpdatedAt   time.Time
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.ID,
		arg.UserID,
		arg.Username,
		arg.Slug,
		arg.AvatarImage,
		arg.CoverImage,
		arg.HeadLine,
		arg.UpdatedAt,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Username,
		&i.UpdatedAt,
		&i.AvatarImage,
		&i.CoverImage,
		&i.HeadLine,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, user_id, slug, username, updated_at, avatar_image, cover_image, head_line FROM profiles
WHERE user_id = $1
`

func (q *Queries) GetProfile(ctx context.Context, userID uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Username,
		&i.UpdatedAt,
		&i.AvatarImage,
		&i.CoverImage,
		&i.HeadLine,
	)
	return i, err
}

const getProfileBySlug = `-- name: GetProfileBySlug :one
SELECT id, user_id, slug, username, updated_at, avatar_image, cover_image, head_line FROM profiles
WHERE slug = $1
`

func (q *Queries) GetProfileBySlug(ctx context.Context, slug string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileBySlug, slug)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Username,
		&i.UpdatedAt,
		&i.AvatarImage,
		&i.CoverImage,
		&i.HeadLine,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles 
SET slug = $2, username = $3, avatar_image = $4, cover_image = $5
WHERE user_id = $1
RETURNING id, user_id, slug, username, updated_at, avatar_image, cover_image, head_line
`

type UpdateProfileParams struct {
	UserID      uuid.UUID
	Slug        string
	Username    string
	AvatarImage sql.NullString
	CoverImage  sql.NullString
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.UserID,
		arg.Slug,
		arg.Username,
		arg.AvatarImage,
		arg.CoverImage,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Username,
		&i.UpdatedAt,
		&i.AvatarImage,
		&i.CoverImage,
		&i.HeadLine,
	)
	return i, err
}
