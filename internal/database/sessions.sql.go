// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, user_email, refresh_token, expires_at, is_revoked, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, user_email, refresh_token, is_revoked, created_at, expires_at
`

type CreateSessionParams struct {
	ID           string
	UserID       uuid.UUID
	UserEmail    string
	RefreshToken string
	ExpiresAt    time.Time
	IsRevoked    bool
	CreatedAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.UserEmail,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.IsRevoked,
		arg.CreatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserEmail,
		&i.RefreshToken,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :one
DELETE FROM sessions
WHERE id = $1
RETURNING id, user_id, user_email, refresh_token, is_revoked, created_at, expires_at
`

func (q *Queries) DeleteSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, deleteSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserEmail,
		&i.RefreshToken,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, user_email, refresh_token, is_revoked, created_at, expires_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserEmail,
		&i.RefreshToken,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const revokeSession = `-- name: RevokeSession :one
UPDATE sessions
SET is_revoked = true
WHERE id = $1
RETURNING id, user_id, user_email, refresh_token, is_revoked, created_at, expires_at
`

func (q *Queries) RevokeSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, revokeSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserEmail,
		&i.RefreshToken,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
